/*******************************************************************************
 * \file asclin_private.h
 * \brief serial header file details for ASCLIN
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
#ifndef ASCLIN_PRIVATE_H
#define ASCLIN_PRIVATE_H

/* selection of the pins */

/** \addtogroup IfxLld_Asclin_Std_Enumerations
 * \{ */
/** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
 * Definition in Ifx_ASCLIN.DATCON.B.CSM
 */
typedef enum
{
    asclin_Checksum_classic  = 0, /**< \brief classic checksum */
    asclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
} asclin_Checksum;

/** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
 * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
 */
typedef enum
{
    asclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
    asclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
} asclin_ChecksumInjection;

/** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
 * Idle level is the level outside the data transmission time intervals.\n
 * Definition in Ifx_ASCLIN.IOCR.B.CPOL
 */
typedef enum
{
    asclin_iocr_ClockPolaritySyncMode_idleLow  = 0, /**< \brief idle low */
    asclin_iocr_ClockPolaritySyncMode_idleHigh = 1  /**< \brief idle high */
} asclin_iocr_cpol;

#if defined(TC2XX)
/** \brief Selection of clock source\n
 * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
 */
typedef enum
{
    asclin_csr_ClockSource_noClock  = 0,  /**< \brief no clock will be supplied */
    asclin_csr_ClockSource_fCLC     = 1,  /**< \brief fCLC will be supplied */
    asclin_csr_ClockSource_XTAL     = 2,  /**< \brief XTAL Oscillator Clock fOSC0 will be supplied */
    asclin_csr_ClockSource_fERAY    = 4,  /**< \brief fERAY will be supplied */
    asclin_csr_ClockSource_fASCLINF = 8,  /**< \brief fASCLINF will be supplied */
    asclin_csr_ClockSource_fASCLINS = 16, /**< \brief fASCLINS will be supplied */
} asclin_csr_clksel;
#endif

#if defined(TC3XX)
/** \brief Selection of clock source\n
 * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
 */
typedef enum
{
    asclin_csr_ClockSource_noClock  = 0,  /**< \brief no clock will be supplied */
    asclin_csr_ClockSource_fASCLINF = 2,  /**< \brief fASCLINF will be supplied */
    asclin_csr_ClockSource_fASCLINS = 4, /**< \brief fASCLINS will be supplied */
} asclin_csr_clksel;
#endif

/** \brief Selection of clock source\n
 * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
 */
typedef enum
{
    asclin_csr_ClockIsOff = 0,  /**< \brief Clock is off */
    asclin_csr_ClockIsOn  = 1,  /**< \brief Clock is on */
} asclin_csr_con;

/** \brief CTS input pin selection\n
 * Definition in Ifx_ASCLIN.IOCR.B.CTS
 */
typedef enum
{
    asclin_iocr_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
    asclin_iocr_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
    asclin_iocr_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
    asclin_iocr_CtsInputSelect_3      /**< \brief CTS input pin 3  */
} Asclin_iocr_CtsInputSelect;

/** \brief Number of bits per transfer\n
 * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
 */
typedef enum
{
    asclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 1  */
    asclin_DataLength_2,          /**< \brief number of bits per transfer 2  */
    asclin_DataLength_3,          /**< \brief number of bits per transfer 3  */
    asclin_DataLength_4,          /**< \brief number of bits per transfer 4  */
    asclin_DataLength_5,          /**< \brief number of bits per transfer 5  */
    asclin_DataLength_6,          /**< \brief number of bits per transfer 6  */
    asclin_DataLength_7,          /**< \brief number of bits per transfer 7  */
    asclin_DataLength_8,          /**< \brief number of bits per transfer 8  */
    asclin_DataLength_9,          /**< \brief number of bits per transfer 9  */
    asclin_DataLength_10,         /**< \brief number of bits per transfer 10  */
    asclin_DataLength_11,         /**< \brief number of bits per transfer 11  */
    asclin_DataLength_12,         /**< \brief number of bits per transfer 12  */
    asclin_DataLength_13,         /**< \brief number of bits per transfer 13  */
    asclin_DataLength_14,         /**< \brief number of bits per transfer 14  */
    asclin_DataLength_15,         /**< \brief number of bits per transfer 15  */
    asclin_DataLength_16          /**< \brief number of bits per transfer 16  */
} asclin_DataLength;

/** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
 * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
 */
typedef enum
{
    asclin_frameMode_initialise = 0,  /**< \brief initialize mode */
    asclin_frameMode_asc        = 1,  /**< \brief asc mode */
    asclin_frameMode_spi        = 2,  /**< \brief spi mode */
    asclin_frameMode_lin        = 3   /**< \brief lin mode */
} asclin_FrameMode;

/** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
 * Definition in Ifx_ASCLIN.DATCON.B.HO
 */
typedef enum
{
    asclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
    asclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
} asclin_HeaderResponseSelect;

/** \brief Defines the duration of the IDLE delay in bit times.\n
 * SPI mode: this is the idle time between the frames.\n
 * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
 * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
 */
typedef enum
{
    asclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
    asclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
    asclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
    asclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
    asclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
    asclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
    asclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
    asclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
} asclin_IdleDelay;

/** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
 * LIN mode: delay between the end of the break and the start of the sync character.\n
 * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
 */
typedef enum
{
    asclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
    asclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
    asclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
    asclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
    asclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
    asclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
    asclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
    asclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
} asclin_LeadDelay;

/** \brief Configures if the module in LIN mode operates as master or slave\n
 * Definition in Ifx_ASCLIN.LIN.CON.B.MS
 */
typedef enum
{
    asclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
    asclin_LinMode_master = 1  /**< \brief operates in master mode */
} asclin_LinMode;

/** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
 * Definition in Ifx_ASCLIN.DATCON.B.RM
 */
typedef enum
{
    asclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
    asclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
} asclin_LinResponseTimeoutMode;

/** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
 * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
 */
typedef enum
{
    asclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
    asclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
    asclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
    asclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
    asclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
    asclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
    asclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
    asclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
    asclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
    asclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
    asclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
    asclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
    asclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
} asclin_OversamplingFactor;

/** \brief Type of parity bit attached to data bits\n
 * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
 */
typedef enum
{
    asclin_ParityType_even = 0,  /**< \brief even parity */
    asclin_ParityType_odd  = 1   /**< \brief odd parity */
} asclin_ParityType;

/** \brief Receive buffer mode\n
 * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
 */
typedef enum
{
    asclin_rxfifocon_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
    asclin_rxfifocon_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
} asclin_ReceiveBufferMode;

/** \brief Polarity of the RTS and CTS signals\n
 * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
 */
typedef enum
{
    asclin_iocr_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
    asclin_iocr_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
} Asclin_iocr_RtsCtsPolarity;

/** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
 * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
 */
typedef enum
{
    asclin_rxfifocon_InterruptLevel_1,     /**< \brief RX FIFO level 1  */
    asclin_rxfifocon_InterruptLevel_2,     /**< \brief RX FIFO level 2  */
    asclin_rxfifocon_InterruptLevel_3,     /**< \brief RX FIFO level 3  */
    asclin_rxfifocon_InterruptLevel_4,     /**< \brief RX FIFO level 4  */
    asclin_rxfifocon_InterruptLevel_5,     /**< \brief RX FIFO level 5  */
    asclin_rxfifocon_InterruptLevel_6,     /**< \brief RX FIFO level 6  */
    asclin_rxfifocon_InterruptLevel_7,     /**< \brief RX FIFO level 7  */
    asclin_rxfifocon_InterruptLevel_8,     /**< \brief RX FIFO level 8  */
    asclin_rxfifocon_InterruptLevel_9,     /**< \brief RX FIFO level 9  */
    asclin_rxfifocon_InterruptLevel_10,    /**< \brief RX FIFO level 10  */
    asclin_rxfifocon_InterruptLevel_11,    /**< \brief RX FIFO level 11  */
    asclin_rxfifocon_InterruptLevel_12,    /**< \brief RX FIFO level 12  */
    asclin_rxfifocon_InterruptLevel_13,    /**< \brief RX FIFO level 13  */
    asclin_rxfifocon_InterruptLevel_14,    /**< \brief RX FIFO level 14  */
    asclin_rxfifocon_InterruptLevel_15,    /**< \brief RX FIFO level 15  */
    asclin_rxfifocon_InterruptLevel_16     /**< \brief RX FIFO level 16  */
} asclin_rxFifocon_InterruptLevel;

/** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
 * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
 */
typedef enum
{
    asclin_rxfifocon_OutletWidth_0,     /**< \brief number of bytes 0  */
    asclin_rxfifocon_OutletWidth_1,     /**< \brief number of bytes 1  */
    asclin_rxfifocon_OutletWidth_2,     /**< \brief number of bytes 2  */
    asclin_rxfifocon_OutletWidth_4,     /**< \brief number of bytes 4  */
} asclin_RxFifoOutletWidth;

/** \brief Alternate input selection for Rx signal.\n
 * Definition in Ifx_ASCLIN.IOCR.B.ALTI
 */
typedef enum
{
    asclin_iocr_RxInputSelect_ARXnA,     /**< \brief alternate input selection 0  */
    asclin_iocr_RxInputSelect_ARXnB,     /**< \brief alternate input selection 1  */
    asclin_iocr_RxInputSelect_ARXnC,     /**< \brief alternate input selection 2  */
    asclin_iocr_RxInputSelect_ARXnD,     /**< \brief alternate input selection 3  */
    asclin_iocr_RxInputSelect_ARXnE,     /**< \brief alternate input selection 4  */
    asclin_iocr_RxInputSelect_ARXnF,     /**< \brief alternate input selection 5  */
    asclin_iocr_RxInputSelect_ARXnG,     /**< \brief alternate input selection 6  */
    asclin_iocr_RxInputSelect_ARXnH      /**< \brief alternate input selection 7  */
} Asclin_iocr_RxInputSelect;

/** \brief Digital Glitch Filter Depth.\n
 * Definition in Ifx_ASCLIN.IOCR.B.DEPTH
 */
typedef enum
{
    asclin_DepthSelect_Off,   /**< \brief off, default  */
    asclin_DepthSelect_1,     /**< \brief delay filter by 1  */
    asclin_DepthSelect_2,     /**< \brief delay filter by 2  */
    asclin_DepthSelect_3,     /**< \brief delay filter by 3  */
    asclin_DepthSelect_4,     /**< \brief delay filter by 4  */
    asclin_DepthSelect_5,     /**< \brief delay filter by 5  */
    asclin_DepthSelect_6,     /**< \brief delay filter by 6  */
    asclin_DepthSelect_7      /**< \brief delay filter by 7  */
} asclin_DepthSelect;

/** \brief Sample point position\n
 * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
 */
typedef enum
{
    asclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
    asclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
    asclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
    asclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
    asclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
    asclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
    asclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
    asclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
    asclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
    asclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
    asclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
    asclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
    asclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
    asclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
    asclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
} asclin_SamplePointPosition;

/** \brief Number of samples per bit, sample mode/median filter\n
 * Definition in Ifx_ASCLIN.BITCON.B.SM
 */
typedef enum
{
    asclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
    asclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
} asclin_SamplesPerBit;

/** \brief SPI mode: defines the shift direction of the shift register.\n
 * ASC and LIN mode: should be set to 0.\n
 * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
 */
typedef enum
{
    asclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
    asclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
} asclin_ShiftDirection;

/** \brief Defines the idle level of the SLSO signal, which is the level.\n
 * Outside the data transmission, leading and trailing time intervals.\n
 * Definition in Ifx_ASCLIN.IOCR.B.SPOL
 */
typedef enum
{
    asclin_SlavePolaritySyncModeSlsoIdleLow  = 0, /**< \brief idle low */
    asclin_SlavePolaritySyncModeSlsoIdleHigh = 1  /**< \brief idle high */
} asclin_iocr_spol;

/** \brief Defines the in module connection of the transmit signal to
 * receive signal. If Loop-back is enabled, the module can be run and
 * tested without an external connection, in ASC and SPI modes. In
 * LIN mode, loopback should not be used, because the module can be
 * either master or slave.
 */
typedef enum
{
	asclin_iocr_LoopBackModeDisabled  = 0, /**< \brief disables loop back mode */
	asclin_iocr_LoopBackModeEnabled = 1  /**< \brief enables loop back mode */
} asclin_iocr_lb;

/** \brief Defines the sensitivity of the module to the external CTS signal.
 * If disabled, the CTS signal is considered being permanently active.
 */
typedef enum
{
	asclin_iocr_CTS_disabled = 0, /**< \brief disables CTS */
	asclin_iocr_CTS_enabled = 1  /**< \brief enables CTS */
} asclin_iocr_ctsen;


/** \brief Defines
 */
typedef enum
{
	asclin_txfifocon_NoAction = 0, /**< \brief  */
	asclin_txfifocon_Flushed = 1  /**< \brief */
} asclin_txfifocon_FifoFlush;

#if defined(TC3XX)
/** \brief Defines
 */
typedef enum
{
	asclin_txfifocon_CombinedMoveMode = 0, /**< \brief  */
	asclin_txfifocon_SingleMoveMode = 1, /**< \brief  */
	asclin_txfifocon_BatchMoveMode = 2, /**< \brief  */
} asclin_txfifocon_fm;


/** \brief Defines
 */
typedef enum
{
	asclin_rxfifocon_CombinedMoveMode = 0, /**< \brief  */
	asclin_rxfifocon_SingleMoveMode = 1, /**< \brief  */
	asclin_rxfifocon_BatchMoveMode = 2, /**< \brief  */
} asclin_rxfifocon_fm;

#endif
/** \brief Defines
 */
typedef enum
{
	asclin_rxfifocon_NoAction = 0, /**< \brief  */
	asclin_rxfifocon_Flushed = 1  /**< \brief */
} asclin_rxfifocon_FifoFlush;

/** \brief Defines Parity Enable
 * Enables the parity bit attached to the data bits. Parity bit
 * can be used for ASC and SPI protocols. The standard LIN bytes
 * do not use this parity bit.
 */
typedef enum
{
	asclin_ParityEnable_Disabled = 0, /**< \brief  */
	asclin_ParityEnable_Enabled  = 1  /**< \brief */
} asclin_ParityEnable;

/** \brief Defines
 */
typedef enum
{
	asclin_CollisionDetection_Disabled = 0, /**< \brief  */
	asclin_CollisionDetection_Enabled  = 1  /**< \brief */
} asclin_CollisionDetection;



/** \brief Enable/disable the sensitivity of the module to sleep signal\n
 * Definition in Ifx_ASCLIN.CLC.B.EDIS
 */
typedef enum
{
    asclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
    asclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
} asclin_SleepMode;

/** \brief Error status
 */
typedef enum
{
    asclin_Status_configurationError = 0,  /**< \brief Configuration error */
    asclin_Status_noError            = 1   /**< \brief No error */
} asclin_Status;

/** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
 * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
 */
typedef enum
{
  asclin_StopBit_0,     /**< \brief number of stop bits 0  */
  asclin_StopBit_1,     /**< \brief number of stop bits 1  */
  asclin_StopBit_2,     /**< \brief number of stop bits 2  */
  asclin_StopBit_3,     /**< \brief number of stop bits 3  */
  asclin_StopBit_4,     /**< \brief number of stop bits 4  */
  asclin_StopBit_5,     /**< \brief number of stop bits 5  */
  asclin_StopBit_6,     /**< \brief number of stop bits 6  */
  asclin_StopBit_7      /**< \brief number of stop bits 7  */
} asclin_StopBit;

/** \brief Enables the TxFIFO outlet.\n
 * Definition in ASCLINx.TXFIFOCON.B.ENO
 */
typedef enum
{
    asclin_txfifocon_OutletDisabled,    /**< \brief Disabled. In LIN case, if the protocol engine tries to fetch data */
    asclin_txfifocon_OutletEnabled,     /**< \brief Enabled. In LIN case, no data is moved to the shift register until it is fetched by the protocol engine.  */
} Asclin_txfifocon_OutletEnable;

/** \brief Enables the RxFIFO inlet.\n
 * Definition in ASCLINx.RXFIFOCON.B.ENO
 */
typedef enum
{
    asclin_rxfifocon_InletDisabled,    /**< \brief Disabled. */
    asclin_rxfifocon_InletEnabled,     /**< \brief Enabled.*/
} asclin_rxfifocon_InletEnable;

/** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
 * Definition in ASCLINx.TXFIFOCON.B.INW
 */
typedef enum
{
  asclin_txfifocon_InletWidth_0,     /**< \brief number of bytes 0  */
  asclin_txfifocon_InletWidth_1,     /**< \brief number of bytes 1  */
  asclin_txfifocon_InletWidth_2,     /**< \brief number of bytes 2  */
  asclin_txfifocon_InletWidth_4,     /**< \brief number of bytes 4  */
} Asclin_txfifocon_InletWidth;

/** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
 * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
 */
typedef enum
{
	asclin_txfifocon_InterruptLevel_0,     /**< \brief TX FIFO level 0  */
  asclin_txfifocon_InterruptLevel_1,     /**< \brief TX FIFO level 1  */
  asclin_txfifocon_InterruptLevel_2,     /**< \brief TX FIFO level 2  */
  asclin_txfifocon_InterruptLevel_3,     /**< \brief TX FIFO level 3  */
  asclin_txfifocon_InterruptLevel_4,     /**< \brief TX FIFO level 4  */
  asclin_txfifocon_InterruptLevel_5,     /**< \brief TX FIFO level 5  */
  asclin_txfifocon_InterruptLevel_6,     /**< \brief TX FIFO level 6  */
  asclin_txfifocon_InterruptLevel_7,     /**< \brief TX FIFO level 7  */
  asclin_txfifocon_InterruptLevel_8,     /**< \brief TX FIFO level 8  */
  asclin_txfifocon_InterruptLevel_9,     /**< \brief TX FIFO level 9  */
  asclin_txfifocon_InterruptLevel_10,    /**< \brief TX FIFO level 10  */
  asclin_txfifocon_InterruptLevel_11,    /**< \brief TX FIFO level 11  */
  asclin_txfifocon_InterruptLevel_12,    /**< \brief TX FIFO level 12  */
  asclin_txfifocon_InterruptLevel_13,    /**< \brief TX FIFO level 13  */
  asclin_txfifocon_InterruptLevel_14,    /**< \brief TX FIFO level 14  */
  asclin_txfifocon_InterruptLevel_15     /**< \brief TX FIFO level 15  */
} asclin_TxFifoInterruptLevel;


/** \} */

#endif	/* end of file */

